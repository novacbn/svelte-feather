/* src/components/PageNav.svelte generated by Svelte v3.22.3 */
import { SvelteComponentDev, add_location, append_dev, attr_dev, create_component, destroy_component, detach_dev, dispatch_dev, element, init, insert_dev, mount_component, noop, safe_not_equal, space, text, transition_in, transition_out, validate_slots } from "/svelte-feather/dist/web_modules/svelte/internal.js";
import { IconGithub } from "/svelte-feather/dist/web_modules/svelte-feather.js";
const file = "src/components/PageNav.svelte";

function add_css() {
  var style = element("style");
  style.id = "svelte-1coezw-style";
  style.textContent = ".version.svelte-1coezw{padding-left:0}.nav-icon{margin-right:0.75rem}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZU5hdi5zdmVsdGUiLCJzb3VyY2VzIjpbIlBhZ2VOYXYuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHtJY29uR2l0aHVifSBmcm9tIFwic3ZlbHRlLWZlYXRoZXJcIjtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gICAgLnZlcnNpb24ge1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgfVxuXG4gICAgOmdsb2JhbCgubmF2LWljb24pIHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAwLjc1cmVtO1xuICAgIH1cbjwvc3R5bGU+XG5cbjxuYXYgY2xhc3M9XCJuYXZcIj5cbiAgICA8ZGl2IGNsYXNzPVwibmF2LWxlZnRcIj5cbiAgICAgICAgPGEgY2xhc3M9XCJicmFuZFwiIGhyZWY9XCIjXCI+c3ZlbHRlLWZlYXRoZXI8L2E+XG5cbiAgICAgICAgPGFcbiAgICAgICAgICAgIGNsYXNzPVwidmVyc2lvblwiXG4gICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL25vdmFjYm4vc3ZlbHRlLWZlYXRoZXIvcmVsZWFzZXNcIlxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGFnXCI+djAuMC4xPC9zcGFuPlxuICAgICAgICA8L2E+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwibmF2LXJpZ2h0XCI+XG4gICAgICAgIDxhXG4gICAgICAgICAgICBjbGFzcz1cImJ1dHRvbiBvdXRsaW5lXCJcbiAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vbm92YWNibi9zdmVsdGUtZmVhdGhlclwiXG4gICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPlxuICAgICAgICAgICAgPEljb25HaXRodWIgY2xhc3M9XCJuYXYtaWNvblwiIHNpemU9XCJzbWFsbFwiIC8+XG4gICAgICAgICAgICBHaXRIdWJcbiAgICAgICAgPC9hPlxuICAgIDwvZGl2PlxuPC9uYXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0ksUUFBUSxjQUFDLENBQUMsQUFDTixZQUFZLENBQUUsQ0FBQyxBQUNuQixDQUFDLEFBRU8sU0FBUyxBQUFFLENBQUMsQUFDaEIsWUFBWSxDQUFFLE9BQU8sQUFDekIsQ0FBQyJ9 */";
  append_dev(document.head, style);
}

function create_fragment(ctx) {
  let nav;
  let div0;
  let a0;
  let t1;
  let a1;
  let span;
  let t3;
  let div1;
  let a2;
  let t4;
  let current;
  const icongithub = new IconGithub({
    props: {
      class: "nav-icon",
      size: "small"
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      nav = element("nav");
      div0 = element("div");
      a0 = element("a");
      a0.textContent = "svelte-feather";
      t1 = space();
      a1 = element("a");
      span = element("span");
      span.textContent = "v0.0.1";
      t3 = space();
      div1 = element("div");
      a2 = element("a");
      create_component(icongithub.$$.fragment);
      t4 = text("\n            GitHub");
      attr_dev(a0, "class", "brand");
      attr_dev(a0, "href", "#");
      add_location(a0, file, 16, 8, 247);
      attr_dev(span, "class", "tag");
      add_location(span, file, 23, 12, 481);
      attr_dev(a1, "class", "version svelte-1coezw");
      attr_dev(a1, "href", "https://github.com/novacbn/svelte-feather/releases");
      attr_dev(a1, "target", "_blank");
      attr_dev(a1, "rel", "noopener noreferrer");
      add_location(a1, file, 18, 8, 301);
      attr_dev(div0, "class", "nav-left");
      add_location(div0, file, 15, 4, 216);
      attr_dev(a2, "class", "button outline");
      attr_dev(a2, "href", "https://github.com/novacbn/svelte-feather");
      attr_dev(a2, "target", "_blank");
      attr_dev(a2, "rel", "noopener noreferrer");
      add_location(a2, file, 28, 8, 574);
      attr_dev(div1, "class", "nav-right");
      add_location(div1, file, 27, 4, 542);
      attr_dev(nav, "class", "nav");
      add_location(nav, file, 14, 0, 194);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, nav, anchor);
      append_dev(nav, div0);
      append_dev(div0, a0);
      append_dev(div0, t1);
      append_dev(div0, a1);
      append_dev(a1, span);
      append_dev(nav, t3);
      append_dev(nav, div1);
      append_dev(div1, a2);
      mount_component(icongithub, a2, null);
      append_dev(a2, t4);
      current = true;
    },
    p: noop,
    i: function intro(local) {
      if (current) return;
      transition_in(icongithub.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icongithub.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(nav);
      destroy_component(icongithub);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance($$self, $$props, $$invalidate) {
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PageNav> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("PageNav", $$slots, []);

  $$self.$capture_state = () => ({
    IconGithub
  });

  return [];
}

class PageNav extends SvelteComponentDev {
  constructor(options) {
    super(options);
    if (!document.getElementById("svelte-1coezw-style")) add_css();
    init(this, options, instance, create_fragment, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "PageNav",
      options,
      id: create_fragment.name
    });
  }

}

export default PageNav;